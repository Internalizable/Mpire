/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package me.internalizable.musically;

import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.CardLayout;
import java.util.concurrent.CompletableFuture;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import me.internalizable.musically.panels.HistoryPanel;
import me.internalizable.musically.panels.HomePanel;
import me.internalizable.musically.panels.LoginPanel;
import me.internalizable.musically.panels.RecordingPanel;
import me.internalizable.musically.panels.RegisterPanel;
import me.internalizable.musically.panels.SongPanel;
import me.internalizable.musically.panels.SplashPanel;

/**
 *
 * @author Internalizable
 */
public class CoreFrame extends javax.swing.JFrame {

    private static CoreFrame instance;
    public static CoreFrame getInstance() { return instance; }
    
    /**
     * Creates new form CoreFrame
     */
    public CoreFrame() {
        instance = this;
        
        initComponents();
        
        setResizable(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splash = new me.internalizable.musically.panels.SplashPanel();
        login = new me.internalizable.musically.panels.LoginPanel();
        register = new me.internalizable.musically.panels.RegisterPanel();
        home = new me.internalizable.musically.panels.HomePanel();
        recording = new me.internalizable.musically.panels.RecordingPanel();
        song = new me.internalizable.musically.panels.SongPanel();
        history = new me.internalizable.musically.panels.HistoryPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());
        getContentPane().add(splash, "splash");
        getContentPane().add(login, "login");
        getContentPane().add(register, "register");
        getContentPane().add(home, "home");
        getContentPane().add(recording, "recording");
        getContentPane().add(song, "song");
        getContentPane().add(history, "history");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       
        /*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        */
        FlatDarculaLaf.setup();
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CoreFrame cF = new CoreFrame();
                cF.setVisible(true);
                
                CompletableFuture.runAsync(() -> {
                    try {
                        cF.getSplashPanel().startProgressBar();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(CoreFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private me.internalizable.musically.panels.HistoryPanel history;
    private me.internalizable.musically.panels.HomePanel home;
    private me.internalizable.musically.panels.LoginPanel login;
    private me.internalizable.musically.panels.RecordingPanel recording;
    private me.internalizable.musically.panels.RegisterPanel register;
    private me.internalizable.musically.panels.SongPanel song;
    private me.internalizable.musically.panels.SplashPanel splash;
    // End of variables declaration//GEN-END:variables
    
    public void changeView(String toView) {
        CardLayout cl = (CardLayout)(getContentPane().getLayout());
        cl.show(getContentPane(), toView);
    }
    
    public SplashPanel getSplashPanel() {
        return splash;
    }
    
    public HomePanel getHomePanel() {
        return home;
    }
    
    public RecordingPanel getRecordingPanel() {
        return recording;
    }
    
    public RegisterPanel getRegisterPanel() {
        return register;
    }
    
    public LoginPanel getLoginPanel() {
        return login;
    }
    
    public SongPanel getSongPanel() {
        return song;
    }
    
    public HistoryPanel getHistoryPanel() {
        return history;
    }
}
